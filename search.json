[{"title":"easyexcel自定义excel导出","url":"/2024/03/11/EasyExcel实现非模板自定义Excel导出/","content":"\n### 1 关于需求\n\n最近需要做一个Excel的动态导出，大致样式如下：\n\n![image-20240311093225548](/img/EasyExcel实现非模板自定义Excel导出-1.png)\n\n我们可以根据需求将一个excel分为如下图的四个部分：\n\n![企业微信截图_17101209325397](/img/EasyExcel实现非模板自定义Excel导出-4.png)\n\n图中的excel大致可以分为四个部分：\n\n\t1. 标题部分，最关键的地方就在于需要动态的根据导出的总列数来合并单元格\n\t1. 单据数据部分，这一部分是整个单据的基础信息，需要水平方向排列，并且需要支持仅导出特定的字段\n\t1. 货品数据部分，这一部分就是最常见的excel表格的排列方式了，只是也需要支持仅导出特定字段\n\t1. 签字栏，这部分和单据数据部分相似，都是水平方向排列\n\n选择使用easyexcel来实现该功能。\n\n### 2 版本信息\n\neasyexcel使用2.2.10，cglib使用3.1\n\n```xml\n<dependency>\n\t<groupId>com.alibaba</groupId>\n\t<artifactId>easyexcel</artifactId>\n\t<version>2.2.10</version>\n\t<exclusions>\n\t\t<exclusion>\n\t\t\t<groupId>cglib</groupId>\n\t\t\t<artifactId>cglib</artifactId>\n\t\t</exclusion>\n\t</exclusions>\n</dependency>\n<dependency>\n\t<groupId>cglib</groupId>\n\t<artifactId>cglib</artifactId>\n\t<version>3.1</version>\n</dependency>\n```\n\n其他依赖如下\n\n```xml\n<dependency>\n\t<groupId>org.projectlombok</groupId>\n\t<artifactId>lombok</artifactId>\n</dependency>\n<dependency>\n\t<groupId>cn.hutool</groupId>\n\t<artifactId>hutool-all</artifactId>\n\t<version>5.8.25</version>\n</dependency>\n```\n\n### 3 基本实现\n\n对于标题、单据数据、签字栏部分，可以使用List<List\\<String>>的数据来实现；而货品数据部分，直接使用List\\<Object>的方式更加方便。\n\n货品数据的实体类如下：\n\n```java\nimport com.alibaba.excel.annotation.ExcelProperty;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\nimport java.math.BigDecimal;\n\n/**\n * @Description 基本的例子\n * @Author kazusa\n * @Date 2024-03-08 17:04\n */\n@Data\n@AllArgsConstructor\npublic class SimpleDomain {\n\n    @ExcelProperty(\"ID\")\n    private Long id;\n\n    @ExcelProperty(\"姓名\")\n    private String name;\n\n    @ExcelProperty(\"年龄\")\n    private Integer age;\n\n    @ExcelProperty(\"银行余额\")\n    private BigDecimal bankBalance;\n\n    @ExcelProperty(\"描述\")\n    private String desc;\n\n    @ExcelProperty(\"不导出的属性\")\n    private String exclude;\n\n}\n```\n\n导出工具类如下：\n\n```java\nimport com.alibaba.excel.EasyExcel;\nimport com.alibaba.excel.ExcelWriter;\nimport com.alibaba.excel.support.ExcelTypeEnum;\nimport com.alibaba.excel.write.merge.OnceAbsoluteMergeStrategy;\nimport com.alibaba.excel.write.metadata.WriteSheet;\nimport com.alibaba.excel.write.metadata.WriteTable;\nimport com.kazusa.test.easyexcel.demo.simple.domain.SimpleDomain;\n\nimport java.math.BigDecimal;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * @Description 基本的例子\n * @Author kazusa\n * @Date 2024-03-08 17:07\n */\npublic class SimpleTestService {\n\n    private static final String FILE_LOCATION = \"D:/test.xlsx\";\n\n    public void export() {\n        // 构建writer\n        ExcelWriter writer = EasyExcel.write(FILE_LOCATION, SimpleDomain.class)\n                .autoCloseStream(Boolean.FALSE)\n                .excelType(ExcelTypeEnum.XLSX)\n                .needHead(Boolean.TRUE)\n                .build();\n\n        // 构建sheet\n        WriteSheet sheet = EasyExcel.writerSheet(\"test-sheet-name\")\n                .needHead(Boolean.FALSE)\n                .build();\n\n        // 构建标题\n        List<List<String>> title = Collections.singletonList(Collections.singletonList(\"标题1\"));\n        WriteTable titleTable = EasyExcel.writerTable(0)\n                .needHead(Boolean.FALSE)\n                .registerWriteHandler(new OnceAbsoluteMergeStrategy(0, 0, 0, 7))// 合并单元格\n                .build();\n        // 写入标题\n        writer.write(title, sheet, titleTable);\n\n        // 构建两个表的数据：一个竖直方向排列，一个水平方向排列\n        String blank = \"     \";\n        List<List<String>> vTableData = Arrays.asList(\n                Arrays.asList(\"编号:\", \"4536251\", blank, \"时间:\", \"2024-01-02\", blank, \"操作人:\", \"ADMIN\"),\n                Arrays.asList(\"操作时间:\", \"2024-01-01\"),\n                Arrays.asList(\"描述信息:\", \"描述描述描述描述描述描述描述描述\"),\n                Collections.singletonList(\"\") // 添加一个空行\n        );\n\n        List<SimpleDomain> hTableData = Arrays.asList(\n                new SimpleDomain(1L, \"张三\", 24, new BigDecimal(\"22.22\"), \"张三的描述很短\", \"不导出\"),\n                new SimpleDomain(2L, \"李四\", 30, new BigDecimal(\"22222.22\"), \"李四的描述很短\", \"不导出\"),\n                new SimpleDomain(3L, \"王五\", 56, new BigDecimal(\"22333.22\"), \"王五的描述很短\", \"不导出\"),\n                new SimpleDomain(4L, \"赵六\", 16, new BigDecimal(\"22.2244\"), \"赵六的描述很短\", \"不导出\"),\n                new SimpleDomain(5L, \"钱七\", 23, BigDecimal.ZERO, \"钱七的描述很短才怪钱七的描述很短才怪钱七的描述很短才怪钱七的描述很短才怪钱七的描述很短才怪钱七的描述很短才怪\", \"不导出\")\n        );\n\n        // 写入两个表：一个竖直方向排列，一个水平方向排列\n        WriteTable vTable = EasyExcel.writerTable(1).build();\n        writer.write(vTableData, sheet, vTable);\n\n        WriteTable hTable = EasyExcel.writerTable(2)// 需要指定tableNo,head才能正常导出\n                .includeColumnFiledNames(Arrays.asList(\"id\", \"name\", \"age\", \"bankBalance\", \"desc\"))// 选择某些属性导出\n//                .excludeColumnFiledNames()// 也可以排除某些属性\n                .needHead(Boolean.TRUE)\n                .build();\n        writer.write(hTableData, sheet, hTable);\n\n        writer.finish();\n    }\n\n    public static void main(String[] args) {\n        new SimpleTestService().export();\n    }\n\n}\n```\n\n最终导出结果如图：\n\n![image-20240311095425156](/img/EasyExcel实现非模板自定义Excel导出-2.png)\n\n可以看到，基本实现了我们的需求，但是有一个问题：列宽并没有自适应，导致部分列的文本显示不全。我们在26行和38行添加自适应列宽的handler，代码如下：\n\n```java\nimport com.alibaba.excel.EasyExcel;\nimport com.alibaba.excel.ExcelWriter;\nimport com.alibaba.excel.support.ExcelTypeEnum;\nimport com.alibaba.excel.write.handler.WriteHandler;\nimport com.alibaba.excel.write.merge.OnceAbsoluteMergeStrategy;\nimport com.alibaba.excel.write.metadata.WriteSheet;\nimport com.alibaba.excel.write.metadata.WriteTable;\nimport com.alibaba.excel.write.style.column.LongestMatchColumnWidthStyleStrategy;\nimport com.kazusa.test.easyexcel.demo.simple.domain.SimpleDomain;\n\nimport java.math.BigDecimal;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\n/**\n * @Description 基本的例子\n * @Author kazusa\n * @Date 2024-03-08 17:07\n */\npublic class SimpleTestService {\n\n    private static final String FILE_LOCATION = \"D:/test.xlsx\";\n\n    public void export() {\n        // 构建一个自动列宽handler\n        WriteHandler autoResize = new LongestMatchColumnWidthStyleStrategy();\n\n        // 构建writer\n        ExcelWriter writer = EasyExcel.write(FILE_LOCATION, SimpleDomain.class)\n                .autoCloseStream(Boolean.FALSE)\n                .excelType(ExcelTypeEnum.XLSX)\n                .needHead(Boolean.TRUE)\n                .build();\n\n        // 构建sheet\n        WriteSheet sheet = EasyExcel.writerSheet(\"test-sheet-name\")\n                .registerWriteHandler(autoResize)// 每一个sheet使用一个handler\n                .needHead(Boolean.FALSE)\n                .build();\n\n        // 构建标题\n        List<List<String>> title = Collections.singletonList(Collections.singletonList(\"标题1\"));\n        WriteTable titleTable = EasyExcel.writerTable(0)\n                .needHead(Boolean.FALSE)\n                .registerWriteHandler(new OnceAbsoluteMergeStrategy(0, 0, 0, 7))// 合并单元格\n                .build();\n        // 写入标题\n        writer.write(title, sheet, titleTable);\n\n        // 构建两个表的数据：一个竖直方向排列，一个水平方向排列\n        String blank = \"     \";\n        List<List<String>> vTableData = Arrays.asList(\n                Arrays.asList(\"编号:\", \"4536251\", blank, \"时间:\", \"2024-01-02\", blank, \"操作人:\", \"ADMIN\"),\n                Arrays.asList(\"操作时间:\", \"2024-01-01\"),\n                Arrays.asList(\"描述信息:\", \"描述描述描述描述描述描述描述描述\"),\n                Collections.singletonList(\"\") // 添加一个空行\n        );\n\n        List<SimpleDomain> hTableData = Arrays.asList(\n                new SimpleDomain(1L, \"张三\", 24, new BigDecimal(\"22.22\"), \"张三的描述很短\", \"不导出\"),\n                new SimpleDomain(2L, \"李四\", 30, new BigDecimal(\"22222.22\"), \"李四的描述很短\", \"不导出\"),\n                new SimpleDomain(3L, \"王五\", 56, new BigDecimal(\"22333.22\"), \"王五的描述很短\", \"不导出\"),\n                new SimpleDomain(4L, \"赵六\", 16, new BigDecimal(\"22.2244\"), \"赵六的描述很短\", \"不导出\"),\n                new SimpleDomain(5L, \"钱七\", 23, BigDecimal.ZERO, \"钱七的描述很短才怪钱七的描述很短才怪钱七的描述很短才怪钱七的描述很短才怪钱七的描述很短才怪钱七的描述很短才怪\", \"不导出\")\n        );\n\n        // 写入两个表：一个竖直方向排列，一个水平方向排列\n        WriteTable vTable = EasyExcel.writerTable(1).build();\n        writer.write(vTableData, sheet, vTable);\n\n        WriteTable hTable = EasyExcel.writerTable(2)// 需要指定tableNo,head才能正常导出\n                .includeColumnFiledNames(Arrays.asList(\"id\", \"name\", \"age\", \"bankBalance\", \"desc\"))// 选择某些属性导出\n//                .excludeColumnFiledNames()// 也可以排除某些属性\n                .needHead(Boolean.TRUE)\n                .build();\n        writer.write(hTableData, sheet, hTable);\n\n        writer.finish();\n    }\n\n    public static void main(String[] args) {\n        new SimpleTestService().export();\n    }\n\n}\n```\n\n最后导出结果如下：\n\n![image-20240311095937208](/img/EasyExcel实现非模板自定义Excel导出-3.png)\n\n基本实现样式需求，剩余的文本居中、字体大小、单元格背景等easyexcel均提供了比较简单的api。\n\n### 4 完全实现\n\n详见：https://github.com/seadeemo/spring-demo/tree/main/easyexcel-demo\n\n其中实现了单个excel单个sheet、单个excel多sheet、多个excel压缩包导出。\n\n","tags":["Java","Excel"],"categories":["实用"]}]